0.  How much time did you spend on this pre-class exercise, and when?
	
	1 hour

1.  What are one or two points that you found least clear in the
    10/08 slide decks (including the narration)?

	Due to a prelim tomorrow I didn’t have enough time to dig through
	all slides. There must be materials I overlooked that I wish to catch
	up later.

2.  Now that we are now basically a third of the way into the
    semester, and are (mostly) settled into the steady pace of things,
    I would appreciate your feedback on what is working well or poorly
    about the class.  Comments on things I can reasonably change are
    particularly useful -- venting about the cluster, for example, is
    understandable but doesn't help me that much in adjusting!

	One thing I like about this course is certainly that it involves a lot
	of materials and concepts in computer science.
	Apparently the teaching staff are still experimenting the technologies 
	in this course. Intensively using Github seemed to “filtered out” some
	of the students, and switching between topics were kind of challenging
	for the students. I guess I didn’t realize how much before-class work 
	I should do in this course when I decided to take it. It’s not bad practice
	to leave discussion in the lectures, but when I had hard deadlines that
	I had to yield CS5220 work to, I can be easily lost on the following lecture.
	I’m managing not to let that happen too often, and so far it seems working
	fine.

3.  The ring demo implements the protocol described in the particle
    systems slide deck from 9/15:

    http://cornell-cs5220-f15.github.io/slides/2015-09-15-particle.html#/11

    a) In your own words, describe what ring.c is doing.

	Start with two nodes, each one claim their own job, finish the computation
	and then exchange buffer to finish computation.

    b) How might you modify the code to have the same computational
       pattern, but using non-blocking communication rather than
       MPI_Sendrecv?  Note that according to the MPI standard,
       one isn't supposed to read from a buffer that is being
       handled by a non-blocking send, so it is probably necessary
       to use three temporary buffers rather than the current two.

	set up a temporary buffer and both nodes read and write from that buffer?
